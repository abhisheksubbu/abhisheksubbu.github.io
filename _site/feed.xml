<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">

    <channel>
        <title>AbhishekSubbu</title>
        <link>http://localhost:4000</link>
        <description>Sharing my thoughts on the Cloud</description>
        <lastBuildDate>Tue, 17 Mar 2020 19:26:20 +0530</lastBuildDate>
        
        <item>
            <title>Object Oriented Programming Principles</title>
            <link>
                http://localhost:4000/object-oriented-programming-principles/
            </link>
            <description>
                &lt;h2 id=&quot;history&quot;&gt;History&lt;/h2&gt;

&lt;p&gt;When programming languages were introduced into the industry, they were usually Procedural in nature. Procedural means line by line execution from top to bottom.&lt;/p&gt;

&lt;p&gt;For example, the procedure for making a phone call is:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Pick up the phone&lt;/li&gt;
  &lt;li&gt;Unlock the phone&lt;/li...
            </description>
            <pubDate>Tue, 25 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/object-oriented-programming-principles/
            </guid>
        </item>
        
        <item>
            <title>Polly Retry Policies</title>
            <link>
                http://localhost:4000/polly-retry-policies/
            </link>
            <description>
                &lt;p&gt;If you have followed my blog on implementing “Retries using Polly in .NET Core”, then this blog will make more sense to you. In this blog, we will understand how many different techniques of Retry policies can be used in Polly.&lt;/p&gt;

&lt;p&gt;There are 4 different ways in which Transient Error Policy can handle faults.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Retry&lt;/li&gt;
  &lt;li&gt...
            </description>
            <pubDate>Thu, 20 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/polly-retry-policies/
            </guid>
        </item>
        
        <item>
            <title>Retries using Polly in .NET Core</title>
            <link>
                http://localhost:4000/retries-using-polly-in-net-core/
            </link>
            <description>
                &lt;p&gt;In this blog, we will look at a common scenario where we have to call an API endpoint and handle retries efficiently in .NET Core. For this purpose, we will be using a library called as “Polly“.&lt;/p&gt;

&lt;p&gt;Polly is a library that allows developers to express resilience and transient fault handling policies such as Retry, Circuit Breaker, Timeout, Bulkhead Isolation, and Fallba...
            </description>
            <pubDate>Wed, 19 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/retries-using-polly-in-net-core/
            </guid>
        </item>
        
        <item>
            <title>The State of Salesforce Developers</title>
            <link>
                http://localhost:4000/state-of-salesforce-developers/
            </link>
            <description>
                &lt;p&gt;I am writing this blog to basically put my thoughts on the state of salesforce developers. This is not to defame or criticize anyone or any company. I am just trying to share what I see, hear and feel about developers in salesforce ecosystem.&lt;/p&gt;

&lt;p&gt;It is a fact that any Salesforce developer that you meet will have the following strengths and weakness. This is a consistent...
            </description>
            <pubDate>Tue, 18 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/state-of-salesforce-developers/
            </guid>
        </item>
        
        <item>
            <title>Using Serilog in ASP.NET Core</title>
            <link>
                http://localhost:4000/using-serilog-asp-net-core/
            </link>
            <description>
                &lt;p&gt;&lt;a href=&quot;https://serilog.net/&quot;&gt;Serilog&lt;/a&gt; is a logging implementation that can be plugged into ASP.NET Core. It supports structured logging API’s and receives log events from the ASP.NET Core framework class libraries. In this blog we will see how to configure Serilog in ASP.Net Core project.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Firstly, create a fresh ASP.NET Core ...
            </description>
            <pubDate>Wed, 12 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/using-serilog-asp-net-core/
            </guid>
        </item>
        
        <item>
            <title>Memento Pattern</title>
            <link>
                http://localhost:4000/memento-pattern/
            </link>
            <description>
                &lt;h2 id=&quot;problem-statement&quot;&gt;Problem Statement&lt;/h2&gt;

&lt;p&gt;You have an editor in which you can save the content many times. You need an Undo feature in the editor with which you can undo the changes and get the previous content.&lt;/p&gt;

&lt;div class=&quot;language-csharp highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&qu...
            </description>
            <pubDate>Wed, 12 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/memento-pattern/
            </guid>
        </item>
        
        <item>
            <title>What are Design Patterns</title>
            <link>
                http://localhost:4000/design-patterns/
            </link>
            <description>
                &lt;p&gt;Design Patterns has nothing to do with algorithms or programming constructs/concepts (like loops, big-o complexity, etc). Instead, Design Patterns guide you to structure the classes and how they should collaborate.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The goal of embracing Design Patterns is to “Design resuable and extensible object oriented software”.&lt;/p&gt;
&lt;/blockquote&gt;...
            </description>
            <pubDate>Wed, 12 Feb 2020 00:00:00 +0530</pubDate>
            <guid>
                http://localhost:4000/design-patterns/
            </guid>
        </item>
        
    </channel>
</rss>