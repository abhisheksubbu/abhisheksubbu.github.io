I"Z\<p>If you have followed my blog on implementing “Retries using Polly in .NET Core”, then this blog will make more sense to you. In this blog, we will understand how many different techniques of Retry policies can be used in Polly.</p>

<p>There are 4 different ways in which Transient Error Policy can handle faults.</p>

<ol>
  <li>Retry</li>
  <li>Retry Forever</li>
  <li>Wait and Retry</li>
  <li>Wait and Retry Forever</li>
  <li>Circuit Breaker</li>
  <li>Advanced Circuit Breaker</li>
  <li>Fallback</li>
</ol>

<h2 id="1-retry">1. Retry</h2>

<p>Retry simply dictates the handler to retry when a transient error occurs.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
<span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
<span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
<span class="p">{</span>
<span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
<span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
<span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
<span class="p">})</span>
<span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">RetryAsync</span><span class="p">());</span> <span class="c1">//Retries only once</span>
<span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">RetryAsync</span><span class="p">(</span><span class="m">3</span><span class="p">));</span> <span class="c1">//Retries only for 3 times</span>
<span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">RetryAsync</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">onRetry</span><span class="p">:</span> <span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">retryCount</span><span class="p">)=&gt;</span>
<span class="p">{</span>
<span class="c1">//Add logic to be executed before each retry</span>
<span class="p">}));</span><span class="c1">//Retries only for 3 times but on every retry, it can execute the logic specified</span>
<span class="p">}</span></code></pre></figure>

<h2 id="2-retry-forever">2. Retry Forever</h2>

<p>Retry Forever means that the handler keeps retrying until it succeeds. So, here there is no concept of retry count.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">RetryForeverAsync</span><span class="p">());</span> <span class="c1">//Retries until it succeeds</span>
                <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">RetryForeverAsync</span><span class="p">(</span><span class="n">onRetry</span><span class="p">:</span> <span class="p">(</span><span class="n">exception</span><span class="p">)=&gt;</span>
                <span class="p">{</span>
                    <span class="c1">//Add logic to be executed before each retry</span>
                <span class="p">}));</span><span class="c1">//Retries forever but on every retry, it can execute the logic specified</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-wait-and-retry">3. Wait and Retry</h2>

<p>Wait and Retry means that the handler first waits for the the specified amount of time and then retries. Here, you can specify a max retry count so that the handler can give up if it doesn’t get a response in the max retries.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">WaitAndRetryAsync</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMilliSeconds</span><span class="p">(</span><span class="m">500</span><span class="p">));</span> <span class="c1">//Wait for 5 seconds and then Retries for a maximum of 3 times</span>
                <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">WaitAndRetryAsync</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMilliseconds</span><span class="p">(</span><span class="m">500</span><span class="p">),</span> <span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">timeSpan</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="c1">//Add logic to be executed before each retry</span>
                <span class="p">}));</span> <span class="c1">//Wait for 5 seconds, execute some logic and then Retry for a maximum of 3 times.</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-wait-and-retry-forever">4. Wait and Retry Forever</h2>

<p>Wait and Retry Forever means that the handler first waits for the the specified amount of time and then retries until it succeeds. Here, there is no concept of retry count because it is a forever technique.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">WaitAndRetryForeverAsync</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMilliSeconds</span><span class="p">(</span><span class="m">500</span><span class="p">));</span> <span class="c1">//Wait for 5 seconds and then Retries until it succeeds</span>
                <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">WaitAndRetryForeverAsync</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMilliseconds</span><span class="p">(</span><span class="m">500</span><span class="p">),</span> <span class="p">(</span><span class="n">exception</span><span class="p">,</span> <span class="n">timeSpan</span><span class="p">)</span> <span class="p">=&gt;</span>
                <span class="p">{</span>
                    <span class="c1">//Add logic to be executed before each retry</span>
                <span class="p">}));</span> <span class="c1">//Wait for 5 seconds, execute some logic and then Retries until it succeeds</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="5-circuit-breaker">5. Circuit Breaker</h2>

<p>Circuit Breaker is a technique in which the entire operations are stopped/allowed with respect the conditions that we specify in the circuit breaker. It’s very similar to the Miniature Circuit Breaker (MCB) electrical component that we use at our homes to protect the house from power surge.</p>

<p><img src="https://www.abhisheksubbu.com/wp-content/uploads/2020/02/home-electrical-mcb-300x300.jpg" alt="Miniature Circuit Breaker (MCB) used for home" /></p>

<p>A circuit breaker (from .NET core – Polly perspective) can put the transient error handler in 4 states.</p>

<ul>
  <li>Open – Normal operation. Execution of actions allowed.</li>
  <li>Closed – The automated controller has opened the circuit. Execution of actions blocked.</li>
  <li>HalfOpen – Recovering from open state, after the automated break duration has expired. Execution of actions permitted. Success of subsequent action/s controls onward transition to Open or Closed state.</li>
  <li>Isloated – Circuit held manually in an open state. Execution of actions blocked.</li>
</ul>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">CircuitBreakerAsync</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromMinutes</span><span class="p">(</span><span class="m">1</span><span class="p">)));</span> <span class="c1">//Stops the handler (Circuit State to Open) for 1 minute if exceptions are encountered for 2 consecutive times. After 1 minute, the handler starts operating normally (Circuit State to Closed).</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="6-advanced-circuit-breaker">6. Advanced Circuit Breaker</h2>

<p>Advanced Circuit Breaker helps us to measure the amount of transient faults occurring in the system and break the circuit accordingly and reset back after a particular duration.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">AdvancedCircuitBreakerAsync</span><span class="p">(</span>
                    <span class="n">failureThreshold</span><span class="p">:</span><span class="m">0.5</span><span class="p">,</span>
                    <span class="n">samplingDuration</span><span class="p">:</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">10</span><span class="p">),</span>
                    <span class="n">minimumThroughput</span><span class="p">:</span> <span class="m">8</span><span class="p">,</span>
                    <span class="n">durationOfBreak</span><span class="p">:</span> <span class="n">TimeSpan</span><span class="p">.</span><span class="nf">FromSeconds</span><span class="p">(</span><span class="m">30</span><span class="p">)</span>
                    <span class="p">));</span>
                <span class="c1">// Breaks the circuit for 30 seconds if 50% of above of incoming requests fails OR a minimum of 8 faults occur within a 10 second period. The circuit is reset/closed after 30 seconds.</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="7-fallback">7. Fallback</h2>

<p>Fallback technique helps to return a fallback value instead of exception re-throw when faults keep occurring. This helps the system to ensure that it gracefully tries to keep the system stable when it detects a fallback value coming by.</p>

<div class="language-csharp highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">public</span> <span class="k">void</span> <span class="nf">ConfigureServices</span><span class="p">(</span><span class="n">IServiceCollection</span> <span class="n">services</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddControllersWithViews</span><span class="p">();</span>
    <span class="n">services</span><span class="p">.</span><span class="nf">AddHttpClient</span><span class="p">(</span><span class="s">"GitHub"</span><span class="p">,</span> <span class="n">client</span> <span class="p">=&gt;</span>
    <span class="p">{</span>
        <span class="n">client</span><span class="p">.</span><span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="s">"https://api.github.com/"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"Accept"</span><span class="p">,</span> <span class="s">"application/vnd.github.v3+json"</span><span class="p">);</span>
        <span class="n">client</span><span class="p">.</span><span class="n">DefaultRequestHeaders</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"User-Agent"</span><span class="p">,</span> <span class="s">"HttpClientFactoryExample"</span><span class="p">);</span>
    <span class="p">})</span>
        <span class="p">.</span><span class="nf">AddTransientHttpErrorPolicy</span><span class="p">(</span><span class="n">policy</span> <span class="p">=&gt;</span> <span class="n">policy</span><span class="p">.</span><span class="nf">FallbackAsync</span><span class="p">(</span><span class="k">new</span> <span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">Http</span><span class="p">.</span><span class="nf">HttpResponseMessage</span><span class="p">(</span><span class="n">System</span><span class="p">.</span><span class="n">Net</span><span class="p">.</span><span class="n">HttpStatusCode</span><span class="p">.</span><span class="n">RequestTimeout</span><span class="p">)));</span>
                <span class="c1">// Returns a fallback value</span>
<span class="p">}</span>
</code></pre></div></div>
:ET