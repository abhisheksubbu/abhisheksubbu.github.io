I"bq<p>Firstly, I need to acknowledge the valuable inputs that <a href="https://twitter.com/apurkiss" target="\_blank">Adam Purkiss</a> and <a href="https://krishhari.wordpress.com/about/" target="\_blank">Hari Krishnan</a> have contributed in the Salesforce community on apex trigger frameworks and its management.</p>

<blockquote>
  <p><strong>Disclaimer</strong>: Many organizations and people in the community have their own version of Trigger Framework. That is totally fine and this blog is not to prove them wrong.</p>
</blockquote>

<p>In this blog, I have tried to extend the trigger framework to be more configurable in nature. If you have any suggestions/concerns, please feel free to comment on this blog post.</p>

<h4 id="what-you-need-to-know-before-you-read-this-blog">What you need to know before you read this blog</h4>

<ol>
  <li><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_triggers.htm" target="\_blank">Basic understanding on Salesforce Apex Triggers</a></li>
  <li><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_triggers_context_variables.htm" target="\_blank">Understanding of various Trigger Context Variables</a></li>
  <li><a href="https://developer.salesforce.com/docs/atlas.en-us.apexcode.meta/apexcode/apex_triggers_order_of_execution.htm" target="\_blank">Order of Execution in Salesforce</a></li>
</ol>

<h4 id="current-problems-with-apex-triggers">Current Problems with Apex Triggers</h4>

<ol>
  <li><strong>Many triggers for one object</strong> – Having more than 1 triggger per object causes the prediction of Execution Order to be difficult.</li>
  <li><strong>Business Logic scattered in triggers &amp; classes</strong> – Business Logic gets scattered in some triggers, handler classes and helper classes. Thus, it causes maintenance problems.</li>
  <li><strong>Re-entry of trigger logic</strong> – Difficult to manage &amp; maintain these as many developers have their own approach of managing re-entries.</li>
  <li><strong>Number of SOQL and DML statements executed</strong> in a trigger context somtimes goes out of control</li>
  <li><strong>Difficult to de-couple logic</strong> – There needs to be lot of impact analysis due to scattered code before you remove or pull some logic out.</li>
  <li><strong>Not enough logs generated</strong> – Logging is not consistent from triggers to classes. Usually, developers have to write logging statements here and there.</li>
</ol>

<h4 id="benefits-of-a-trigger-framework">Benefits of a Trigger Framework</h4>

<ol>
  <li>Makes the <strong>Triggers more streamlined</strong> and provides a precise predictability in order of execution</li>
  <li>It provides <strong>separate code paths for new &amp; re-entrant logic</strong>. Thus making the management of logic simpler and impact-free.</li>
  <li>Provides a <strong>Centralized SOQL and DML management</strong> by which SOQL and DML statements can be managed in a central location rather than making changes everywhere.</li>
  <li>Facilitates <strong>Logging at the framework level</strong>. Thus, making the developers focus on writing the logic efficiently and not worry about exception handling around each line they write.</li>
  <li>Provides <strong>ability to switch ON/OFF triggers based on configurations</strong>. This helps us when issues occur in production and we have to troubleshoot it without deploying code.</li>
</ol>

<p>The trigger framework orchestrates its execution as shown below.
<img src="https://abhisheksubbusite.s3-ap-southeast-1.amazonaws.com/images/trigger-execution-pipeline.png" alt="Trigger Execution Pipeline" /></p>

<h5 id="explanation-of-the-methods-in-the-trigger-pipeline">Explanation of the methods in the trigger pipeline</h5>

<ol>
  <li><code class="highlighter-rouge">bulkBefore</code>- This point is an ideal location where we can do anything before the actual before trigger logic starts to work. It is a good choice to centralize all the data using SOQL statements and keep the data ready in a list/map so that the before trigger handlers can get/set properties of the already queried records.</li>
  <li><code class="highlighter-rouge">applyDefault</code> - Particularly for beforeInsert, it’s best to ensure that the default values of the incoming record be set based on any business expectation. This will ensure that the values of the record is always consistent in terms of business expectation. Note that this only applies to the beforeInsert pipeline.</li>
  <li><code class="highlighter-rouge">beforeInsert</code> - This is the point where the actual beforeInsert logic needs to be plugged in [with the correct order of operations that business expects]</li>
  <li><code class="highlighter-rouge">beforeUpdate</code> - This is the point where the actual beforeUpdate logic needs to be plugged in [with the correct order of operations that business expects]</li>
  <li><code class="highlighter-rouge">beforeDelete</code> - This is the point where the actual beforeDelete logic needs to be plugged in [with the correct order of operations that business expects]</li>
  <li><code class="highlighter-rouge">bulkAfter</code> - This point is an ideal location where we can do anything just before the actual after trigger logic starts to work. It is a good choice to centralize all the data using SOQL statements and keep the data ready in a list/map so that the after trigger handlers can get/set properties of the already queried records.</li>
  <li><code class="highlighter-rouge">onValidate</code> - Typically, on any after triggers, it is always good to validate the consistency of the records and ensure that errors are thrown back if validation fails. This <code class="highlighter-rouge">onValidate()</code> saves from any potential after triggers throwing an exception just because a record is not consistent.</li>
  <li><code class="highlighter-rouge">afterInsert</code> - This is the point where the actual afterInsert logic needs to be plugged in [with the correct order of operations that business expects]</li>
  <li><code class="highlighter-rouge">afterUpdate</code> - This is the point where the actual afterUpdate logic needs to be plugged in [with the correct order of operations that business expects]</li>
  <li><code class="highlighter-rouge">afterDelete</code> - This is the point where the actual afterDelete logic needs to be plugged in [with the correct order of operations that business expects]</li>
  <li><code class="highlighter-rouge">afterUnDelete</code> - This is the point where the actual afterUnDelete logic needs to be plugged in [with the correct order of operations that business expects]. UnDelete happens when a record lying in the Recycle Bin is restored back to the object.</li>
</ol>

<p>In a nutshell, what did we try to streamline using this trigger pipeline?</p>

<ul>
  <li>Before Trigger Execution (4th point in the order of execution)</li>
  <li>
    <p>After Trigger Execution (8th point in the order of execution)</p>

    <p><img src="https://abhisheksubbusite.s3-ap-southeast-1.amazonaws.com/images/order-of-execution.png" alt="Order of Execution" /></p>
  </li>
</ul>

<p>Every trigger execution context can now be separated from the pipeline by having its own handlers. For example, <code class="highlighter-rouge">beforeInsert</code> for Lead can be separated into a class called <strong>LeadBeforeInsertHandler</strong>.
Why we need to separate it? It ensures <strong>separation of concerns</strong> and that we are not mixing handler responsibilities in trigger pipeline orchestration.</p>

<p>Let’s now look at how Handler execution can be generalized.
<img src="https://abhisheksubbusite.s3-ap-southeast-1.amazonaws.com/images/handler-execution-pipeline.png" alt="Handler Pipeline" /></p>

<h5 id="explanation-of-steps-in-the-handler-pipeline">Explanation of steps in the Handler pipeline</h5>

<ol>
  <li><strong>Picking the Handler Instance</strong> - Based on the incoming object type, we need to pick and instantiate the correct handler class</li>
  <li><strong>mainEntry</strong> - This is the method that needs to execute if the trigger control flow is being invoked freshly in a context and it is not as a result of any re-entry.</li>
  <li><strong>inProgressEntry</strong> - This is the method that needs to execute in case the trigger control re-enters due to any DML’s executed within the trigger lifetime.</li>
  <li><strong>Centralized DML</strong> - After a trigger handler is executed, it would have set some properties of the records and this is the point where we can centrally execute DML statements on the collection of records.</li>
</ol>

<h4 id="itriggerdispatcher">ITriggerDispatcher</h4>

<p>Interface that contains the contracts of the main trigger pipeline</p>

<div class="language-apex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ITriggerDispatcher</span>
    <span class="p">{</span>
        <span class="kt">void</span> <span class="kn">applyDefaults(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">bulkBefore(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">beforeInsert(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">beforeUpdate(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">beforeDelete(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>

        <span class="kt">void</span> <span class="kn">bulkAfter(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">onValidate(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">afterInsert(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">afterUpdate(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">afterDelete(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">afterUnDelete(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>

        <span class="kt">void</span> <span class="kn">andFinally(</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="itriggerhandler">ITriggerHandler</h4>

<p>Interface that contains the contracts of the trigger context execution</p>

<div class="language-apex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">interface</span> <span class="nc">ITriggerHandler</span>
    <span class="p">{</span>
        <span class="kt">void</span> <span class="kn">mainEntry(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">inProgressEntry(TriggerParameter</span> <span class="kn">tp</span><span class="p">);</span>

        <span class="kt">void</span> <span class="kn">insertObjects(</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">updateObjects(</span><span class="p">);</span>
        <span class="kt">void</span> <span class="kn">deleteObjects(</span><span class="p">);</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="triggerparameter">TriggerParameter</h4>

<p>Encapsulated form of the trigger context variables</p>

<div class="language-apex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="kd">class</span> <span class="nc">TriggerParameter</span>
    <span class="p">{</span>
        <span class="kd">public</span> <span class="kd">Enum</span> <span class="kn">TriggerEvent</span> <span class="p">{</span> <span class="kn">beforeInsert</span><span class="p">,</span> <span class="kn">beforeUpdate</span><span class="p">,</span> <span class="kn">beforeDelete</span><span class="p">,</span> <span class="kn">afterInsert</span><span class="p">,</span> <span class="kn">afterUpdate</span><span class="p">,</span> <span class="kn">afterDelete</span><span class="p">,</span> <span class="kn">afterUndelete</span> <span class="p">}</span>
        <span class="kd">public</span> <span class="kn">TriggerEvent</span> <span class="kn">tEvent</span><span class="p">;</span>

        <span class="kd">public</span> <span class="kn">List</span><span class="o">&lt;</span><span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">oldList</span> <span class="p">{</span> <span class="kn">get</span><span class="p">;</span> <span class="kd">private</span> <span class="kn">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="kd">public</span> <span class="kn">List</span><span class="o">&lt;</span><span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">newList</span> <span class="p">{</span> <span class="kn">get</span><span class="p">;</span> <span class="kd">private</span> <span class="kn">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="kd">public</span> <span class="kn">Map</span><span class="o">&lt;</span><span class="kn">Id</span><span class="p">,</span> <span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">oldMap</span> <span class="p">{</span> <span class="kn">get</span><span class="p">;</span> <span class="kd">private</span> <span class="kn">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="kd">public</span> <span class="kn">Map</span><span class="o">&lt;</span><span class="kn">Id</span><span class="p">,</span> <span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">newMap</span> <span class="p">{</span> <span class="kn">get</span><span class="p">;</span> <span class="kd">private</span> <span class="kn">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="kd">public</span> <span class="kn">String</span> <span class="kn">triggerObject</span> <span class="p">{</span> <span class="kn">get</span><span class="p">;</span> <span class="kd">private</span> <span class="kn">set</span><span class="p">;</span> <span class="p">}</span>
        <span class="kd">public</span> <span class="kt">Boolean</span> <span class="kn">isExecuting</span> <span class="p">{</span> <span class="kn">get</span><span class="p">;</span> <span class="kd">private</span> <span class="kn">set</span><span class="p">;</span> <span class="p">}</span>

        <span class="kd">public</span> <span class="kn">TriggerParameter(List</span><span class="o">&lt;</span><span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">olist</span><span class="p">,</span> <span class="kn">List</span><span class="o">&lt;</span><span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">nlist</span><span class="p">,</span> <span class="kn">Map</span><span class="o">&lt;</span><span class="kn">Id</span><span class="p">,</span> <span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">omap</span><span class="p">,</span> <span class="kn">Map</span><span class="o">&lt;</span><span class="kn">Id</span><span class="p">,</span> <span class="kn">SObject</span><span class="o">&gt;</span> <span class="kn">nmap</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">ib</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">ia</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">id</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">ii</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">iu</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">iud</span><span class="p">,</span> <span class="kt">Boolean</span> <span class="kn">ie</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">this</span><span class="kn">.oldList</span> <span class="o">=</span> <span class="kn">olist</span><span class="p">;</span>
            <span class="k">this</span><span class="kn">.newList</span> <span class="o">=</span> <span class="kn">nlist</span><span class="p">;</span>
            <span class="k">this</span><span class="kn">.oldMap</span> <span class="o">=</span> <span class="kn">omap</span><span class="p">;</span>
            <span class="k">this</span><span class="kn">.newMap</span> <span class="o">=</span> <span class="kn">nmap</span><span class="p">;</span>
            <span class="k">this</span><span class="kn">.triggerObject</span> <span class="o">=</span> <span class="kn">UtilityClass.getSObjectTypeName(</span><span class="p">(</span><span class="k">this</span><span class="kn">.oldList</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="k">this</span><span class="kn">.oldList.size(</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">)</span> <span class="o">?</span> <span class="k">this</span><span class="kn">.oldList</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="p">:</span> <span class="k">this</span><span class="kn">.newList</span><span class="p">[</span><span class="mi">0</span><span class="p">]);</span>
            <span class="k">if</span> <span class="p">(</span><span class="kn">ib</span> <span class="o">&amp;</span> <span class="kn">ii</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.beforeInsert</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="kn">ib</span> <span class="o">&amp;&amp;</span> <span class="kn">iu</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.beforeUpdate</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="kn">ib</span> <span class="o">&amp;&amp;</span> <span class="kn">id</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.beforeDelete</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="kn">ia</span> <span class="o">&amp;&amp;</span> <span class="kn">ii</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.afterInsert</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="kn">ia</span> <span class="o">&amp;&amp;</span> <span class="kn">iu</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.afterUpdate</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="kn">ia</span> <span class="o">&amp;&amp;</span> <span class="kn">id</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.afterDelete</span><span class="p">;</span>
            <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="kn">ia</span> <span class="o">&amp;&amp;</span> <span class="kn">iud</span><span class="p">)</span> <span class="kn">tEvent</span> <span class="o">=</span> <span class="kn">TriggerEvent.afterUndelete</span><span class="p">;</span>
            <span class="kn">isExecuting</span> <span class="o">=</span> <span class="kn">ie</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>

<h4 id="utilityclass">UtilityClass</h4>

<p>Helper Class that contains methods commonly used in the framework</p>

<ul>
  <li>Note that we are using a Custom Metadata Type named <code class="highlighter-rouge">Salesforce_Object__mdt</code> that contains the dispatcher class name registered for the object</li>
  <li>Similarly, we are using another Custom Metadata Type named <code class="highlighter-rouge">Trigger_Handler__mdt</code> that contains the handler class name registered for the object and its active state</li>
</ul>

<div class="language-apex highlighter-rouge"><div class="highlight"><pre class="highlight"><code>    <span class="kd">public</span> <span class="k">with</span> <span class="kd">sharing</span> <span class="kd">class</span> <span class="nc">UtilityClass</span> <span class="p">{</span>
        <span class="kd">public</span> <span class="kd">static</span> <span class="kn">String</span> <span class="kn">getSObjectTypeName(SObject</span> <span class="kn">so</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="kn">so.getSObjectType(</span><span class="p">)</span><span class="kn">.getDescribe(</span><span class="p">)</span><span class="kn">.getName(</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="kn">ITriggerHandler</span> <span class="kn">getHandler(TriggerParameter</span> <span class="kn">tp</span><span class="p">)</span> <span class="p">{</span>
            <span class="kn">List</span><span class="o">&lt;</span><span class="kn">Trigger_Handler__mdt</span><span class="o">&gt;</span> <span class="kn">handlerConfig</span> <span class="o">=</span> <span class="p">[</span><span class="k">select</span> <span class="kn">DeveloperName</span><span class="p">,</span> <span class="kn">IsActive__c</span> <span class="k">from</span> <span class="kn">Trigger_Handler__mdt</span> <span class="k">where</span> <span class="kn">Salesforce_Object__r.DeveloperName</span><span class="o">=</span><span class="p">:</span><span class="kn">tp.triggerObject</span> <span class="k">and</span> <span class="kn">Trigger_Context__c</span><span class="o">=</span><span class="p">:</span><span class="kn">tp.tEvent.name(</span><span class="p">)</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">];</span>
            <span class="kn">if(handlerConfig.size(</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="kn">TriggerException(</span><span class="s1">'</span><span class="s2">Handler Configuration for '</span><span class="o">+</span><span class="kn">tp.triggerObject</span><span class="o">+</span> <span class="s1">'</span><span class="s2"> - '</span><span class="o">+</span> <span class="kn">tp.tEvent.name(</span><span class="p">)</span> <span class="o">+</span><span class="s1">'</span><span class="s2"> is not defined'</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="kn">string</span> <span class="kn">handlerName</span> <span class="o">=</span> <span class="s1">'</span><span class="s2">EmptyHandler'</span><span class="p">;</span>
                    <span class="kn">if(handlerConfig</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="kn">.IsActive__c</span><span class="p">)</span>
                        <span class="kn">handlerName</span> <span class="o">=</span> <span class="kn">handlerConfig</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="kn">.DeveloperName</span><span class="p">;</span>
                    <span class="kn">Type</span> <span class="kn">classType</span> <span class="o">=</span> <span class="kn">Type.forName(handlerName</span><span class="p">);</span>
                    <span class="kn">ITriggerHandler</span> <span class="kn">handlerInstance</span> <span class="o">=</span> <span class="p">(</span><span class="kn">ITriggerHandler</span><span class="p">)</span><span class="kn">classType.newInstance(</span><span class="p">);</span>
                    <span class="kn">system.debug(</span><span class="s1">'</span><span class="s2"># Handler in charge is: '</span><span class="o">+</span> <span class="kn">handlerName</span><span class="p">);</span>
                    <span class="k">return</span> <span class="kn">handlerInstance</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="kn">Exception</span> <span class="kn">e</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="kn">TriggerException(handlerConfig</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="kn">.DeveloperName</span><span class="o">+</span><span class="s1">'</span><span class="s2"> class doesnt seem to exist. Please check with development team.'</span><span class="p">);</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">}</span>

        <span class="kd">public</span> <span class="kd">static</span> <span class="kn">ITriggerDispatcher</span> <span class="kn">getDispatcherObject(string</span> <span class="kn">sObjectName</span><span class="p">){</span>
            <span class="kn">List</span><span class="o">&lt;</span><span class="kn">Salesforce_Object__mdt</span><span class="o">&gt;</span> <span class="kn">dispatcherConfig</span> <span class="o">=</span> <span class="p">[</span><span class="k">select</span> <span class="kn">Dispatcher_Class_Name__c</span> <span class="k">from</span> <span class="kn">Salesforce_Object__mdt</span> <span class="k">where</span> <span class="kn">DeveloperName</span><span class="o">=</span><span class="p">:</span><span class="kn">sObjectName</span> <span class="k">LIMIT</span> <span class="mi">1</span><span class="p">];</span>
            <span class="kn">if(dispatcherConfig.size(</span><span class="p">)</span><span class="o">==</span><span class="mi">0</span><span class="p">)</span>
            <span class="p">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="kn">TriggerException(</span><span class="s1">'</span><span class="s2">Dispatcher Configuration for '</span><span class="o">+</span><span class="kn">sObjectName</span><span class="o">+</span><span class="s1">'</span><span class="s2"> is not defined'</span><span class="p">);</span>
            <span class="p">}</span>
            <span class="k">else</span>
            <span class="p">{</span>
                <span class="k">try</span>
                <span class="p">{</span>
                    <span class="kn">Type</span> <span class="kn">classType</span> <span class="o">=</span> <span class="kn">Type.forName(dispatcherConfig</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="kn">.Dispatcher_Class_Name__c</span><span class="p">);</span>
                    <span class="kn">ITriggerDispatcher</span> <span class="kn">dispatcherInstance</span> <span class="o">=</span> <span class="p">(</span><span class="kn">ITriggerDispatcher</span><span class="p">)</span><span class="kn">classType.newInstance(</span><span class="p">);</span>
                    <span class="k">return</span> <span class="kn">dispatcherInstance</span><span class="p">;</span>
                <span class="p">}</span>
                <span class="k">catch</span> <span class="p">(</span><span class="kn">Exception</span> <span class="kn">e</span><span class="p">)</span>
                <span class="p">{</span>
                    <span class="k">throw</span> <span class="k">new</span> <span class="kn">TriggerException(dispatcherConfig</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="kn">.Dispatcher_Class_Name__c</span><span class="o">+</span><span class="s1">'</span><span class="s2"> class doesnt seem to exist. Please check with development team.'</span><span class="p">);</span>
                <span class="p">}</span>

            <span class="p">}</span>
        <span class="p">}</span>
    <span class="p">}</span>
</code></pre></div></div>
:ET