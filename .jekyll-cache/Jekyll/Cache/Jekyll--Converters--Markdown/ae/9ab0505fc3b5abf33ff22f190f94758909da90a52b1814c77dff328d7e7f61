I"ú<blockquote>
  <p><strong>Important:</strong> Before you start reading this blog, I strongly urge you to read the <a href="/node-backend/">Backend with NodeJS - Part 1</a> blog so that you will better understand the context.</p>
</blockquote>

<p>As you are aware, the criminal information is currently stored in-memory within the codebase. This is not desired from a real-world perspective. In this blog, we will persist the criminal information in MongoDB rather than managing it in-memory.</p>

<ol>
  <li>Open the NodeJS project</li>
  <li>Install the <code class="highlighter-rouge">mongoose</code> package
    <div class="language-console highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="go">  npm i mongoose
</span></code></pre></div>    </div>
  </li>
  <li>Reference the mongoose package in the app.js and connect to the mongodb locally
    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">mongoose</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongoose</span><span class="dl">'</span><span class="p">);</span>
<span class="nx">mongoose</span>
  <span class="p">.</span><span class="nx">connect</span><span class="p">(</span><span class="dl">'</span><span class="s1">mongodb://localhost/criminals</span><span class="dl">'</span><span class="p">)</span>
  <span class="p">.</span><span class="nx">then</span><span class="p">(()</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connected to database...</span><span class="dl">'</span><span class="p">))</span>
  <span class="p">.</span><span class="k">catch</span><span class="p">((</span><span class="nx">err</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="dl">'</span><span class="s1">Connection to database failed.</span><span class="dl">'</span><span class="p">,</span> <span class="nx">err</span><span class="p">));</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Create the schema of the Criminal object [this is like the table/document definition] and register the schema to the model class</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">const</span> <span class="nx">criminalSchema</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">Schema</span><span class="p">({</span>
  <span class="na">name</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="p">},</span>
  <span class="na">type</span><span class="p">:</span> <span class="p">{</span>
    <span class="na">type</span><span class="p">:</span> <span class="nb">String</span><span class="p">,</span>
  <span class="p">},</span>
<span class="p">});</span>

<span class="kd">const</span> <span class="nx">Criminal</span> <span class="o">=</span> <span class="nx">mongoose</span><span class="p">.</span><span class="nx">model</span><span class="p">(</span><span class="dl">'</span><span class="s1">Criminal</span><span class="dl">'</span><span class="p">,</span> <span class="nx">criminalSchema</span><span class="p">);</span>
</code></pre></div>    </div>
  </li>
  <li>
    <p>Modify the <code class="highlighter-rouge">GET()</code> and <code class="highlighter-rouge">POST()</code> implementations by referencing the <code class="highlighter-rouge">Criminal</code> model class</p>

    <div class="language-javascript highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nx">app</span><span class="p">.</span><span class="kd">get</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/criminals</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="k">await</span> <span class="nx">Criminal</span><span class="p">.</span><span class="nx">find</span><span class="p">());</span>
<span class="p">});</span>

<span class="nx">app</span><span class="p">.</span><span class="nx">post</span><span class="p">(</span><span class="dl">'</span><span class="s1">/api/criminals</span><span class="dl">'</span><span class="p">,</span> <span class="k">async</span> <span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
  <span class="kd">const</span> <span class="nx">newCriminal</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Criminal</span><span class="p">({</span>
    <span class="na">name</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">name</span><span class="p">,</span>
    <span class="na">type</span><span class="p">:</span> <span class="nx">req</span><span class="p">.</span><span class="nx">body</span><span class="p">.</span><span class="nx">type</span><span class="p">,</span>
  <span class="p">});</span>
  <span class="kd">const</span> <span class="nx">result</span> <span class="o">=</span> <span class="k">await</span> <span class="nx">newCriminal</span><span class="p">.</span><span class="nx">save</span><span class="p">();</span>
  <span class="nx">res</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
<span class="p">});</span>
</code></pre></div>    </div>
  </li>
  <li>Run the app.js using the command â€˜node app.js`</li>
  <li>Open Postman and do a GET request to <code class="highlighter-rouge">http://localhost:3000/api/criminals</code>, you should get an empty array as response.</li>
  <li>Now, do a POST request to <code class="highlighter-rouge">http://localhost:3000/api/criminals</code> with the request body as shown below. You should get the response back with the created criminal record that has an <code class="highlighter-rouge">id</code> value. This confirms that POST is working.
<img src="https://abhisheksubbusite.s3-ap-southeast-1.amazonaws.com/images/criminals-post.png" alt="criminals-post" /></li>
  <li>Now, do a GET request to <code class="highlighter-rouge">http://localhost:3000/api/criminals</code> and you should see the newly created criminal record being shown in the response.
<img src="https://abhisheksubbusite.s3-ap-southeast-1.amazonaws.com/images/criminals-get.png" alt="criminals-get" /></li>
</ol>
:ET